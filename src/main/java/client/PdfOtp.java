package client;

import com.itextpdf.text.DocumentException;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfStamper;
import database.dataBaseSql;
import java.awt.HeadlessException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import loan.Loan;
import repository.ReposDataBase;

/**
 *
 * @author alexkovacs
 */
public class PdfOtp extends javax.swing.JFrame {
ReposDataBase adatok = new dataBaseSql();
    /**
     * Creates new form PdfOtp
     */
    public PdfOtp() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        OtpJobButton = new javax.swing.JButton();
        loanOtp = new javax.swing.JButton();
        otpIngHitel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Otp Adatlap Kitöltések");

        OtpJobButton.setText("Munkáltatói");
        OtpJobButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OtpJobButtonActionPerformed(evt);
            }
        });

        loanOtp.setText("Kérelem személyes adatok");
        loanOtp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loanOtpActionPerformed(evt);
            }
        });

        otpIngHitel.setText("Kérelem ingatlan és hitel adatok");
        otpIngHitel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                otpIngHitelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(otpIngHitel)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(OtpJobButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(loanOtp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(142, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addComponent(OtpJobButton)
                .addGap(18, 18, 18)
                .addComponent(loanOtp)
                .addGap(18, 18, 18)
                .addComponent(otpIngHitel)
                .addContainerGap(106, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OtpJobButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OtpJobButtonActionPerformed

        int clientid = 0;
        try {
            clientid = Integer.parseInt(JOptionPane.showInputDialog("Id: "));

            try {

               
                Client lista = adatok.findbyIdClients(clientid);
                

                StringBuilder sb = new StringBuilder();
                sb.append(lista.getVezetekNev());
                sb.append(" ");
                sb.append(lista.getKeresztNevek());
                String name = sb.toString();
                System.out.println(name);

                String ido = lista.getSzulIdo().toString();

                StringBuilder sr = new StringBuilder(ido);

                //sr.append(BLANK_SPACE);
                String pr = sr.substring(0, 5);

                //Create PdfReader instance.
                PdfReader pdfReader = new PdfReader("/Users/alexkovacs/Documents/Dev_Projects/CustomerRegistration/otp_test2.pdf");

                //Create PdfStamper instance.
                PdfStamper pdfStamper = new PdfStamper(pdfReader, new FileOutputStream("/Users/alexkovacs/Documents/Dev_Projects/CustomerRegistration/Otp_job_" + name + ".pdf"));

                //Contain the pdf data.
                PdfContentByte pageContentByte = pdfStamper.getOverContent(1);

                //Create BaseFont instance.
                BaseFont baseFont = BaseFont.createFont(
                        BaseFont.COURIER,
                        BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                pageContentByte.beginText();

                //Set text font and size.
                pageContentByte.setFontAndSize(baseFont, 10);
                pageContentByte.setTextMatrix(110, 734);

                //Write text
                pageContentByte.showText(name);

                //
                pageContentByte.setFontAndSize(baseFont, 10);
                pageContentByte.setTextMatrix(130, 710);
                pageContentByte.showText(lista.getAnyuNeve());
                //
                pageContentByte.setFontAndSize(baseFont, 10);
                pageContentByte.setTextMatrix(100, 695);
                pageContentByte.showText(lista.getSzulHely());
                //
                pageContentByte.setFontAndSize(baseFont, 8);
                pageContentByte.setTextMatrix(430, 695);
                pageContentByte.showText(sr.substring(0, 5));
                //
                pageContentByte.setFontAndSize(baseFont, 8);
                pageContentByte.setTextMatrix(500, 695);
                pageContentByte.showText(sr.substring(5, 7));
                //
                pageContentByte.setFontAndSize(baseFont, 8);
                pageContentByte.setTextMatrix(530, 695);
                pageContentByte.showText(sr.substring(8, 10));

                pageContentByte.endText();

                pdfStamper.close();

                System.out.println("PDF modified successfully.");
                JOptionPane.showMessageDialog(rootPane, "A munkáltatói sikeresen kitöltve!");

            } catch (NullPointerException e) {
                System.out.println("Hiányzó adat! (PdfOtp) " + e.getMessage());
                JOptionPane.showMessageDialog(rootPane, "Hiányzó adat vagy nincs ilyen Id!");

            } catch (IOException ex) {
                Logger.getLogger(PdfOtp.class.getName()).log(Level.SEVERE, null, ex);
            } catch (DocumentException ex) {
                Logger.getLogger(PdfOtp.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (SQLException e) {
        }

    }//GEN-LAST:event_OtpJobButtonActionPerformed

    private void loanOtpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loanOtpActionPerformed
        try {
            // kérelem kitöltése személyes
            int clientid = 0;

            clientid = Integer.parseInt(JOptionPane.showInputDialog("Id: "));
            ReposDataBase adatok = new dataBaseSql();
            Client lista = adatok.findbyIdClients(clientid);

            StringBuilder sb = new StringBuilder();
            sb.append(lista.getVezetekNev());
            sb.append(" ");
            sb.append(lista.getKeresztNevek());
            String name = sb.toString();
            System.out.println(name);

            String ido = lista.getSzulIdo().toString();
            String postalCode = lista.getIranyitoSzam() + "";

            //Create PdfReader instance.
            PdfReader pdfReader
                    = new PdfReader("/Users/alexkovacs/Documents/Dev_Projects/CustomerRegistration/Lakashitel_20190101.pdf");

            //Create PdfStamper instance.
            PdfStamper pdfStamper = new PdfStamper(pdfReader,
                    new FileOutputStream("/Users/alexkovacs/Documents/Dev_Projects/CustomerRegistration/Lakashitel_" + name + ".pdf"));

            //Create BaseFont instance.
            BaseFont baseFont = BaseFont.createFont(
                    BaseFont.COURIER,
                    BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

            //Get the number of pages in pdf.
            int pages = pdfReader.getNumberOfPages();

            //Contain the pdf data.
            PdfContentByte pageNumber2 = pdfStamper.getOverContent(2);

            pageNumber2.beginText();

            pageNumber2.setFontAndSize(baseFont, 16);
            pageNumber2.setTextMatrix(28, 467);
            pageNumber2.showText("X");

            
            pageNumber2.setTextMatrix(28, 405);
            pageNumber2.showText("X");

            //Name
            pageNumber2.setTextMatrix(80, 553);
            pageNumber2.showText(name);

            pageNumber2.setTextMatrix(350, 553);
            pageNumber2.showText(name);

            //Mother Name
            pageNumber2.setTextMatrix(350, 463);
            pageNumber2.showText(lista.getAnyuNeve());

            // Birth Place
            pageNumber2.setTextMatrix(80, 508);
            pageNumber2.showText(lista.getSzulHely());

            // Birth Date
            try {
                
                pageNumber2.setTextMatrix(307, 508);
                pageNumber2.showText(String.valueOf(ido.charAt(0)));
                pageNumber2.setTextMatrix(327, 508);
                pageNumber2.showText(String.valueOf(ido.charAt(1)));
                pageNumber2.setTextMatrix(347, 508);
                pageNumber2.showText(String.valueOf(ido.charAt(2)));
                pageNumber2.setTextMatrix(367, 508);
                pageNumber2.showText(String.valueOf(ido.charAt(3)));
                pageNumber2.setTextMatrix(415, 508);
                pageNumber2.showText(String.valueOf(ido.charAt(5)));
                pageNumber2.setTextMatrix(435, 508);
                pageNumber2.showText(String.valueOf(ido.charAt(6)));
                pageNumber2.setTextMatrix(497, 508);
                pageNumber2.showText(String.valueOf(ido.charAt(8)));
                pageNumber2.setTextMatrix(517, 508);
                pageNumber2.showText(String.valueOf(ido.charAt(9)));
            } catch (Exception e) {
                System.out.println("Hiba a születési dátumban!" + e.getLocalizedMessage());
            }

            // ID Number
            try {

                pageNumber2.setTextMatrix(307, 401);
                pageNumber2.showText(String.valueOf(lista.getSzIgSzam().charAt(0)));
                pageNumber2.setTextMatrix(327, 401);
                pageNumber2.showText(String.valueOf(lista.getSzIgSzam().charAt(1)));
                pageNumber2.setTextMatrix(347, 401);
                pageNumber2.showText(String.valueOf(lista.getSzIgSzam().charAt(2)));
                pageNumber2.setTextMatrix(370, 401);
                pageNumber2.showText(String.valueOf(lista.getSzIgSzam().charAt(3)));
                pageNumber2.setTextMatrix(390, 401);
                pageNumber2.showText(String.valueOf(lista.getSzIgSzam().charAt(4)));
                pageNumber2.setTextMatrix(410, 401);
                pageNumber2.showText(String.valueOf(lista.getSzIgSzam().charAt(5)));
                pageNumber2.setTextMatrix(430, 401);
                pageNumber2.showText(String.valueOf(lista.getSzIgSzam().charAt(6)));
                pageNumber2.setTextMatrix(450, 401);
                pageNumber2.showText(String.valueOf(lista.getSzIgSzam().charAt(7)));
            } catch (Exception e) {
                System.out.println("Hiba a személyi igazolvány számban!" + e.getLocalizedMessage());
            }

            // Lakcimkartya Number     
            try {

                pageNumber2.setTextMatrix(28, 286);
                pageNumber2.showText(String.valueOf(lista.getLakCimSzam().charAt(0)));
                pageNumber2.setTextMatrix(48, 286);
                pageNumber2.showText(String.valueOf(lista.getLakCimSzam().charAt(1)));
                pageNumber2.setTextMatrix(68, 286);
                pageNumber2.showText(String.valueOf(lista.getLakCimSzam().charAt(2)));
                pageNumber2.setTextMatrix(88, 286);
                pageNumber2.showText(String.valueOf(lista.getLakCimSzam().charAt(3)));
                pageNumber2.setTextMatrix(108, 286);
                pageNumber2.showText(String.valueOf(lista.getLakCimSzam().charAt(4)));
                pageNumber2.setTextMatrix(128, 286);
                pageNumber2.showText(String.valueOf(lista.getLakCimSzam().charAt(5)));
                pageNumber2.setTextMatrix(158, 286);
                pageNumber2.showText(String.valueOf(lista.getLakCimSzam().charAt(6)));
                pageNumber2.setTextMatrix(178, 286);
                pageNumber2.showText(String.valueOf(lista.getLakCimSzam().charAt(7)));
            } catch (Exception e) {
                System.out.println("Hiba a lakcimkártya számban!" + e.getLocalizedMessage());
            }

// Personal Id Number
            try {

                
                pageNumber2.setTextMatrix(307, 286);
                pageNumber2.showText(String.valueOf(lista.getSzemelyiSzam().charAt(0)));

                
                pageNumber2.setTextMatrix(335, 286);
                pageNumber2.showText(String.valueOf(lista.getSzemelyiSzam().charAt(2)));
                pageNumber2.setTextMatrix(355, 286);
                pageNumber2.showText(String.valueOf(lista.getSzemelyiSzam().charAt(3)));
                pageNumber2.setTextMatrix(375, 286);
                pageNumber2.showText(String.valueOf(lista.getSzemelyiSzam().charAt(4)));
                pageNumber2.setTextMatrix(395, 286);
                pageNumber2.showText(String.valueOf(lista.getSzemelyiSzam().charAt(5)));
                pageNumber2.setTextMatrix(415, 286);
                pageNumber2.showText(String.valueOf(lista.getSzemelyiSzam().charAt(6)));
                pageNumber2.setTextMatrix(435, 286);
                pageNumber2.showText(String.valueOf(lista.getSzemelyiSzam().charAt(7)));

                
                pageNumber2.setTextMatrix(466, 286);
                pageNumber2.showText(String.valueOf(lista.getSzemelyiSzam().charAt(9)));
                pageNumber2.setTextMatrix(486, 286);
                pageNumber2.showText(String.valueOf(lista.getSzemelyiSzam().charAt(10)));
                pageNumber2.setTextMatrix(506, 286);
                pageNumber2.showText(String.valueOf(lista.getSzemelyiSzam().charAt(11)));
                pageNumber2.setTextMatrix(526, 286);
                pageNumber2.showText(String.valueOf(lista.getSzemelyiSzam().charAt(12)));
            } catch (Exception e) {
                System.out.println("Hiba a személyi számban!" + e.getLocalizedMessage());
            }

            // Tax Number
            try {
                
                pageNumber2.setTextMatrix(30, 238);
                pageNumber2.showText(String.valueOf(lista.getAdoAzonosito().charAt(0)));
                pageNumber2.setTextMatrix(50, 238);
                pageNumber2.showText(String.valueOf(lista.getAdoAzonosito().charAt(1)));
                pageNumber2.setTextMatrix(70, 238);
                pageNumber2.showText(String.valueOf(lista.getAdoAzonosito().charAt(2)));
                pageNumber2.setTextMatrix(90, 238);
                pageNumber2.showText(String.valueOf(lista.getAdoAzonosito().charAt(3)));
                pageNumber2.setTextMatrix(110, 238);
                pageNumber2.showText(String.valueOf(lista.getAdoAzonosito().charAt(4)));
                pageNumber2.setTextMatrix(130, 238);
                pageNumber2.showText(String.valueOf(lista.getAdoAzonosito().charAt(5)));
                pageNumber2.setTextMatrix(150, 238);
                pageNumber2.showText(String.valueOf(lista.getAdoAzonosito().charAt(6)));
                pageNumber2.setTextMatrix(170, 238);
                pageNumber2.showText(String.valueOf(lista.getAdoAzonosito().charAt(7)));
                pageNumber2.setTextMatrix(190, 238);
                pageNumber2.showText(String.valueOf(lista.getAdoAzonosito().charAt(8)));
                pageNumber2.setTextMatrix(210, 238);
                pageNumber2.showText(String.valueOf(lista.getAdoAzonosito().charAt(9)));
            } catch (Exception e) {
                System.out.println("Hiba az adószámban!" + e.getMessage());
            }

            System.out.println("**********");
            System.out.println(lista.getLakCim());
            System.out.println("LakcímSzám: " + lista.getLakCimSzam());
            System.out.println("Szigszám" + lista.getSzIgSzam());
            System.out.println(lista.getSzemelyiSzam());
            System.out.println(lista.getAdoAzonosito());
            System.out.println("Adó: " + String.valueOf(lista.getAdoAzonosito().charAt(0)));
            System.out.println("**********");

            pageNumber2.endText();

            // 3.oldal
            PdfContentByte pageNumbber3 = pdfStamper.getOverContent(3);
            pageNumbber3.beginText();

            // Post Number
            try {
                pageNumbber3.setFontAndSize(baseFont, 16);
                pageNumbber3.setTextMatrix(30, 515);
                pageNumbber3.showText(String.valueOf(postalCode.charAt(0)));
                pageNumbber3.setTextMatrix(50, 515);
                pageNumbber3.showText(String.valueOf(postalCode.charAt(1)));
                pageNumbber3.setTextMatrix(70, 515);
                pageNumbber3.showText(String.valueOf(postalCode.charAt(2)));
                pageNumbber3.setTextMatrix(90, 515);
                pageNumbber3.showText(String.valueOf(postalCode.charAt(3)));
            } catch (Exception e) {
                System.out.println("Hiba az irányítószámban!" + e.getLocalizedMessage());
            }

            // City
            try {
                pageNumbber3.setTextMatrix(125, 515);
                pageNumbber3.showText(lista.getVaros());
            } catch (Exception e) {
                System.out.println("Hiba a Városnévben!" + e.getLocalizedMessage());
            }

            // Address
            try {
                pageNumbber3.setTextMatrix(310, 515);
                pageNumbber3.showText(lista.getLakCim());
            } catch (Exception e) {
                System.out.println("Hiba a címben!" + e.getLocalizedMessage());
            }

            // Email
            try {
                pageNumbber3.setTextMatrix(30, 343);
                pageNumbber3.showText(lista.getEmail());
            } catch (Exception e) {
                System.out.println("Hiba az emailben!" + e.getLocalizedMessage());
            }

            // Mobile number
            try {
                pageNumbber3.setTextMatrix(30, 256);
                pageNumbber3.showText(String.valueOf(lista.getTelSzam().charAt(0)));
                pageNumbber3.setTextMatrix(50, 256);
                pageNumbber3.showText(String.valueOf(lista.getTelSzam().charAt(1)));

                pageNumbber3.setTextMatrix(77, 256);
                pageNumbber3.showText(String.valueOf(lista.getTelSzam().charAt(2)));
                pageNumbber3.setTextMatrix(97, 256);
                pageNumbber3.showText(String.valueOf(lista.getTelSzam().charAt(3)));

                pageNumbber3.setTextMatrix(125, 256);
                pageNumbber3.showText(String.valueOf(lista.getTelSzam().charAt(4)));
                pageNumbber3.setTextMatrix(145, 256);
                pageNumbber3.showText(String.valueOf(lista.getTelSzam().charAt(5)));
                pageNumbber3.setTextMatrix(165, 256);
                pageNumbber3.showText(String.valueOf(lista.getTelSzam().charAt(6)));
                pageNumbber3.setTextMatrix(185, 256);
                pageNumbber3.showText(String.valueOf(lista.getTelSzam().charAt(7)));
                pageNumbber3.setTextMatrix(205, 256);
                pageNumbber3.showText(String.valueOf(lista.getTelSzam().charAt(8)));
                pageNumbber3.setTextMatrix(225, 256);
                pageNumbber3.showText(String.valueOf(lista.getTelSzam().charAt(9)));
                pageNumbber3.setTextMatrix(245, 256);
                pageNumbber3.showText(String.valueOf(lista.getTelSzam().charAt(10)));
            } catch (Exception e) {
                System.out.println("Hiba a telefonszámban!" + e.getLocalizedMessage());
            }

            pageNumbber3.endText();
            
            
            // 4. oldal 
            
             PdfContentByte pageNumbber4 = pdfStamper.getOverContent(4);
                pageNumbber4.beginText();
                pageNumbber4.setFontAndSize(baseFont, 16);
            
                
            // Mitóa lakik     
                try {
                 
                pageNumbber4.setTextMatrix(308, 710);
                pageNumbber4.showText(String.valueOf(lista.getLakhelyido().charAt(0)));
                pageNumbber4.setTextMatrix(328, 710);
                pageNumbber4.showText(String.valueOf(lista.getLakhelyido().charAt(1)));
                pageNumbber4.setTextMatrix(348, 710);
                pageNumbber4.showText(String.valueOf(lista.getLakhelyido().charAt(2)));
                pageNumbber4.setTextMatrix(368, 710);
                pageNumbber4.showText(String.valueOf(lista.getLakhelyido().charAt(3)));
                pageNumbber4.setTextMatrix(418, 710);
                pageNumbber4.showText(String.valueOf(lista.getLakhelyido().charAt(5)));
                pageNumbber4.setTextMatrix(438, 710);
                pageNumbber4.showText(String.valueOf(lista.getLakhelyido().charAt(6)));
            } catch (Exception e) {
                    System.out.println("Hiba a lakhelyidőben!"+e.getLocalizedMessage());
            }
              
                              
                                            System.out.println("Lakhelyidő: "+lista.getLakhelyido());
                                            
            // Munkálttói adatok                                
            try {
                pageNumbber4.setTextMatrix(30, 214);
                pageNumbber4.showText("Munka Bt");
                
                // adószám
                
                pageNumbber4.setTextMatrix(308, 214);
                pageNumbber4.showText("1");
                pageNumbber4.setTextMatrix(328, 214);
                pageNumbber4.showText("2");
                pageNumbber4.setTextMatrix(348, 214);
                pageNumbber4.showText("3");
                pageNumbber4.setTextMatrix(368, 214);
                pageNumbber4.showText("4");
                pageNumbber4.setTextMatrix(388, 214);
                pageNumbber4.showText("5");
                pageNumbber4.setTextMatrix(408, 214);
                pageNumbber4.showText("6");
                pageNumbber4.setTextMatrix(428, 214);
                pageNumbber4.showText("7");
                pageNumbber4.setTextMatrix(448, 214);
                pageNumbber4.showText("8");
                
                pageNumbber4.setTextMatrix(478, 214);
                pageNumbber4.showText("0");
                
                pageNumbber4.setTextMatrix(508, 214);
                pageNumbber4.showText("0");
                pageNumbber4.setTextMatrix(528, 214);
                pageNumbber4.showText("0");
                
                // irányítószám
                
                pageNumbber4.setTextMatrix(30, 154);
                pageNumbber4.showText("1");
                pageNumbber4.setTextMatrix(50, 154);
                pageNumbber4.showText("0");
                pageNumbber4.setTextMatrix(70, 154);
                pageNumbber4.showText("1");
                pageNumbber4.setTextMatrix(90, 154);
                pageNumbber4.showText("1");
                
                
                // település
                
                pageNumbber4.setTextMatrix(125, 154);
                pageNumbber4.showText("Budapest");
                
                // cim
                
                pageNumbber4.setTextMatrix(310, 154);
                pageNumbber4.showText("Kukunka utca 4.");
                
                // mióta dolgozik
                
                pageNumbber4.setTextMatrix(30, 108);
                pageNumbber4.showText("2");
                pageNumbber4.setTextMatrix(50, 108);
                pageNumbber4.showText("0");
                pageNumbber4.setTextMatrix(70, 108);
                pageNumbber4.showText("1");
                pageNumbber4.setTextMatrix(90, 108);
                pageNumbber4.showText("9");
                
                pageNumbber4.setTextMatrix(135, 108);
                pageNumbber4.showText("0");
                pageNumbber4.setTextMatrix(155, 108);
                pageNumbber4.showText("2");                
                
            } catch (Exception e) {
                System.out.println("Hiba a munkáltatói adatokban");
            }                             
                
                pageNumbber4.endText();
                
                
            // 5. oldal
            // csak majd ha kell a vállalkozó adatok
            
            //7. oldal társigénylő?
            
           
            

            //Close the pdfStamper.
            pdfStamper.close();

            System.out.println("PDF modified successfully.");
        } catch (DocumentException | HeadlessException | IOException | NumberFormatException | SQLException e) {
            e.getCause();
        }


    }//GEN-LAST:event_loanOtpActionPerformed

    private void otpIngHitelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_otpIngHitelActionPerformed
          
  int clientid = 0;
        
            
        try {
            clientid = Integer.parseInt(JOptionPane.showInputDialog("Id: "));
            Loan data = adatok.findByIdLoan(clientid);
            
            
            
            
            //Create PdfReader instance.
                PdfReader pdfReader = new PdfReader("/Users/alexkovacs/Documents/Dev_Projects/CustomerRegistration/Lakashitel_20190101_ing_hitel.pdf");

                //Create PdfStamper instance.
                PdfStamper pdfStamper = new PdfStamper(pdfReader, new FileOutputStream("/Users/alexkovacs/Documents/Dev_Projects/CustomerRegistration/Lakashitel_" + clientid + "ing_hitel_.pdf"));

                //Contain the pdf data.
                PdfContentByte pageContentByte = pdfStamper.getOverContent(1);

                //Create BaseFont instance.
                BaseFont baseFont = BaseFont.createFont(
                        BaseFont.COURIER,
                        BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

              

              
                
                 // 9. oldal Fedezet adatok
            
                PdfContentByte pageNumbber1 = pdfStamper.getOverContent(1);
                pageNumbber1.beginText();
                pageNumbber1.setFontAndSize(baseFont, 16);
                
                
                // Postal code
                
                try {
                
                     String postalCode = data.getfIrSzam()+"";
                
                pageNumbber1.setTextMatrix(40, 583);
                pageNumbber1.showText(String.valueOf(postalCode.charAt(0)));
                pageNumbber1.setTextMatrix(60, 583);
                pageNumbber1.showText(String.valueOf(postalCode.charAt(1)));
                pageNumbber1.setTextMatrix(80, 583);
                pageNumbber1.showText(String.valueOf(postalCode.charAt(2)));
                pageNumbber1.setTextMatrix(100, 583);
                pageNumbber1.showText(String.valueOf(postalCode.charAt(3)));
                
                System.out.println(data.getfIrSzam());
                    
            } catch (Exception e) {
                    System.out.println("Hiba az irányítószámban!");
            }
                
              // City
               pageNumbber1.setTextMatrix(130, 583);
               pageNumbber1.showText(data.getfVaros());
              
             // Address
             
               pageNumbber1.setTextMatrix(310, 583);
               pageNumbber1.showText(data.getfCim());
                
            // HRSZ
            
                pageNumbber1.setTextMatrix(40, 540);
               pageNumbber1.showText(data.getHrsz());
            
            pageNumbber1.endText();
            
            
                  //Close the pdfStamper.
            pdfStamper.close();
                
        } catch (DocumentException | IOException e) {
             Logger.getLogger(PdfOtp.class.getName()).log(Level.SEVERE, null, e);
             System.out.println("Nincs Dokumenum!");
        } catch (SQLException ex) {
        Logger.getLogger(PdfOtp.class.getName()).log(Level.SEVERE, null, ex);
    }

                
    }//GEN-LAST:event_otpIngHitelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PdfOtp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PdfOtp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PdfOtp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PdfOtp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PdfOtp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OtpJobButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton loanOtp;
    private javax.swing.JButton otpIngHitel;
    // End of variables declaration//GEN-END:variables
}
